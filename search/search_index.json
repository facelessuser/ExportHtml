{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ExportHtml Overview This is a fork of Andrew Gibson 's PrintHtml plugin. This plugin allows the exporting of a document in Sublime Text to a HTML file. It duplicates Sublime's theme colors and font styles. Features Export to HTML using any tmTheme or sublime-color-scheme for syntax highlighting. Can handle any language supported by ST3 +. Supports bold and italic theme font styles as well. Configurable output. Format suitable for copying and pasting in emails. 2 included sublime-color-scheme files for color and grayscale printing (but any can be used). Export only selections (multi-select supported). Export and show highlights (multi-select supported). Toggle gutter on/off in browser view. Automatically open browser print dialog (optional). Enable/disable configurable word wrapping. Configurable toolbar to appear in the generated webpage. Credits Andrew Gibson : Original idea and base code for converting Sublime view to HTML and allowing me to build off it to make ExportHtml. Print-Color and Print-Grayscale sublime-color-scheme files were derived from Monokai Bright.","title":"ExportHtml"},{"location":"#exporthtml","text":"","title":"ExportHtml"},{"location":"#overview","text":"This is a fork of Andrew Gibson 's PrintHtml plugin. This plugin allows the exporting of a document in Sublime Text to a HTML file. It duplicates Sublime's theme colors and font styles.","title":"Overview"},{"location":"#features","text":"Export to HTML using any tmTheme or sublime-color-scheme for syntax highlighting. Can handle any language supported by ST3 +. Supports bold and italic theme font styles as well. Configurable output. Format suitable for copying and pasting in emails. 2 included sublime-color-scheme files for color and grayscale printing (but any can be used). Export only selections (multi-select supported). Export and show highlights (multi-select supported). Toggle gutter on/off in browser view. Automatically open browser print dialog (optional). Enable/disable configurable word wrapping. Configurable toolbar to appear in the generated webpage.","title":"Features"},{"location":"#credits","text":"Andrew Gibson : Original idea and base code for converting Sublime view to HTML and allowing me to build off it to make ExportHtml. Print-Color and Print-Grayscale sublime-color-scheme files were derived from Monokai Bright.","title":"Credits"},{"location":"installation/","text":"Installation Package Control The recommended way to install ExportHtml is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel. It will show a list of installable plugins. Start typing ExportHtml ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy! Manual Installation Warning This is not the recommended way to install ExportHtml for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone ExportHtml and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install ExportHtml without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe -> markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 -> python-jinja2 packagecontrol/pygments -> pygments facelessuser/sublime-markdown-popups -> mdpopups facelessuser/sublime-markdown -> python-markdown facelessuser/sublime-coloraide -> coloraide Download and unpack or git clone the latest ExportHtml release and unpack as ExportHtml : facelessuser/ExportHtml -> ExportHtml Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) add_dependency ( 'coloraide' ) Restart and enjoy. Git Cloning Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/ExportHtml.git ExportHtml Restart Sublime Text.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#package-control","text":"The recommended way to install ExportHtml is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel. It will show a list of installable plugins. Start typing ExportHtml ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy!","title":"Package Control"},{"location":"installation/#manual-installation","text":"Warning This is not the recommended way to install ExportHtml for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone ExportHtml and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install ExportHtml without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe -> markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 -> python-jinja2 packagecontrol/pygments -> pygments facelessuser/sublime-markdown-popups -> mdpopups facelessuser/sublime-markdown -> python-markdown facelessuser/sublime-coloraide -> coloraide Download and unpack or git clone the latest ExportHtml release and unpack as ExportHtml : facelessuser/ExportHtml -> ExportHtml Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) add_dependency ( 'coloraide' ) Restart and enjoy.","title":"Manual Installation"},{"location":"installation/#git-cloning","text":"Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/ExportHtml.git ExportHtml Restart Sublime Text.","title":"Git Cloning"},{"location":"license/","text":"License ExportHtml is released under the MIT license. Copyright \u00a9 2012 - 2021 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"ExportHtml is released under the MIT license. Copyright \u00a9 2012 - 2021 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"usage/","text":"User Guide Exporting HTML ExportHtml comes with a number of default commands available, but these can be overridden in the settings file. You can also create commands directly outside of the settings file bound to the command palette, key bindings, or even the menu. If adding a command to the settings file, it goes under the html_panel setting. These configurations will appear under the Export to HTML: Show Export Menu command palette command. // Define configurations for the drop down export menu \"html_panel\" : [ // Browser print color (selections and multi-selections allowed) { \"Browser Print - Color\" : { \"numbers\" : true , \"wrap\" : 900 , \"browser_print\" : true , \"multi_select\" : true , \"color_scheme\" : \"Packages/ExportHtml/ColorSchemes/Print Color.sublime-color-scheme\" , \"style_gutter\" : false } } ] The name of the command is the key value, and then you add the parameters you wish to specify. You can use any combination of settings below. Parameter Type Description numbers boolean Display line numbers in the gutter. style_gutter boolean Style gutter with theme backgrounds and foregrounds, or just use the default background/foreground. Default is true . multi_select boolean If multiple regions are selected in a document, only export what is under those selections. By default only the first selection is recognized. Default is false . highlight_selections boolean Highlights all selections in HTML output using the themes selection colors. Multi-select option will be ignored if this is set true . Default is false . ignore_selections boolean Ignores selections in the view. If this is set, multi_select and highlight_selections will be treated as false regardless of their actual value. wrap integer Define the allowable size in px to wrap lines at. By default wrapping is not used. color_scheme string The color scheme (tmTheme or sublime-color-scheme) file you would like to use. By default the current color scheme file is used, or the alternate default color scheme if defined in the setting alternate_scheme . clipboard_copy boolean Copy HTML to the clipboard after generation. Default is false . browser_print boolean When opening in the web browser, also open the browser's print dialog. This will be ignored if view_open is true . Default is false . view_open boolean Open HTML in a Sublime Text tab instead of the web browser. Default is false . no_header boolean Do not display file name, date, and time at the top of the HTML document. Default is false . date_time_format string String denoting the format for date and time when displaying header. Please see Python's documentation on time.strftime for detailed info on formatting syntax. Default is \"%m/%d/%y %I:%M:%S\" . show_full_path boolean Show full path for file name when displaying header. Default is true . save_location string Path to save HTML file. If the file is wanted in the same file as the original, use \".\". Otherwise, use the absolute path to where the file is desired. If there is an issue determining where to save the file, or the path does not exist, the OS temp folder will be used. Default is None (use temp folder). time_stamp string Configure the time stamp of saved HTML when using save_location . To remove time stamps, just set to an empty string \"\" . Please see Python's documentation on time.strftime for detailed info on formatting syntax. Default is \"_%m%d%y%H%M%S\" . toolbar array of strings Option to display a toolbar with to access features in a generated HTML. This setting is an array of keywords that represent the icons in the toolbar to show. Valid keywords include gutter , print , plain_text , annotation , and wrapping . Toolbar will appear when you mouse over the upper right corner of the window of the generated HTML. Default enables all. filter string Filters to use on the theme's colors. The string is a sequence of filters separated by ; . The accepted filters are grayscale , invert , sepia , brightness , contrast , glow , saturation , hue , and colorize . brightness , saturation , and contrast require a float parameter to specify to what magnitude the filter should be applied at. glow requires a float for intensity (usually something like .1 or .2 is sufficient). hue and colorize take a float that represents a degree. hue shifts the hue via the degree given (can accept negative degrees); hues will wrap if they extend past 0 degrees or 360 degrees. Example: \"filter\": \"sepia;invert;brightness(1.1);saturation(1.3);\" . Default is \"\" . disable_nbsp boolean Disable the translation of spaces into &nbsp; . This was originally introduced so I could copy and paste content into Microsoft Outlook. If this is not desired, you can disable it here. table_mode boolean Render export of code in tables which makes copy and paste in things like Outlook or Gmail possible. Default is true . If you wish to bind a command to a key combination etc., the same settings as above can be used. Example: { \"keys\" : [ \"ctrl+alt+n\" ], \"command\" : \"export_html\" , \"args\" : { \"numbers\" : true , \"wrap\" : 900 , \"browser_print\" : true , \"multi_select\" : true , \"color_scheme\" : \"Packages/ExportHtml/ColorSchemes/Print Color.sublime-color-scheme\" , \"style_gutter\" : false } } When viewing the HTML in your web browser, regardless of the gutter settings, the gutter can be toggled to show or be hidden using the toolbar in the upper right corner of the page. Annotations (HTML only) Annotations are comments you can make on selected text. When the HTML is generated, the selected text will be underlined, and when the mouse hovers over them, a tooltip will appear with your comment. In order to use annotations, you must enter into an \"Annotation Mode\". This puts your file in a read only state. At this point, you can select text and create annotations using the annotation commands provided. When you leave the \"Annotation Mode\", all annotations will be lost. So you must export before leaving annotation mode. You can access the annotation commands from the command palette or from the context menu. The commands are as follows: Command Description Enable Annotation Mode Turn annotation mode on. Disable Annotation Mode Turn annotation mode off. Annotate Selection Annotate the given selection (no multi-select support currently). Delete Annotation(s) Delete the annotation region the the cursor resides in (multi-select support). Delete All Annotations Delete all annotation regions. Show Annotation Comment Show the annotation comment of the region under the cursor. You can navigate the annotations in the generated HTML by using a jump table. You can show the jump table at any time by selecting the annotation button in the toolbar. You can also click any annotation to show the jump table as well. If it gets in the way, you can dock it in a different location. Settings File options Parameter Type Description alternate_scheme string or false Defines a default theme to be used if a theme is not specified in a command. When this is false, the current Sublime Text theme in use is used. alternate_font_size integer or false Define an alternate font_size to use by default instead of the current one in use. Use the current one in use if set to a literal false . Default is false . alternate_font_face string or false Define an alternate font_face to use by default instead of the current one in use. Use the current one in use if set to a literal false . Default is false . valid_selection_size integer Minimum allowable size for a selection to be accepted for only the selection to be printed. html_panel array of commands Define export configurations to appear under the Export to HTML: Show Export Menu command palette command.","title":"User Guide"},{"location":"usage/#user-guide","text":"","title":"User Guide"},{"location":"usage/#exporting-html","text":"ExportHtml comes with a number of default commands available, but these can be overridden in the settings file. You can also create commands directly outside of the settings file bound to the command palette, key bindings, or even the menu. If adding a command to the settings file, it goes under the html_panel setting. These configurations will appear under the Export to HTML: Show Export Menu command palette command. // Define configurations for the drop down export menu \"html_panel\" : [ // Browser print color (selections and multi-selections allowed) { \"Browser Print - Color\" : { \"numbers\" : true , \"wrap\" : 900 , \"browser_print\" : true , \"multi_select\" : true , \"color_scheme\" : \"Packages/ExportHtml/ColorSchemes/Print Color.sublime-color-scheme\" , \"style_gutter\" : false } } ] The name of the command is the key value, and then you add the parameters you wish to specify. You can use any combination of settings below. Parameter Type Description numbers boolean Display line numbers in the gutter. style_gutter boolean Style gutter with theme backgrounds and foregrounds, or just use the default background/foreground. Default is true . multi_select boolean If multiple regions are selected in a document, only export what is under those selections. By default only the first selection is recognized. Default is false . highlight_selections boolean Highlights all selections in HTML output using the themes selection colors. Multi-select option will be ignored if this is set true . Default is false . ignore_selections boolean Ignores selections in the view. If this is set, multi_select and highlight_selections will be treated as false regardless of their actual value. wrap integer Define the allowable size in px to wrap lines at. By default wrapping is not used. color_scheme string The color scheme (tmTheme or sublime-color-scheme) file you would like to use. By default the current color scheme file is used, or the alternate default color scheme if defined in the setting alternate_scheme . clipboard_copy boolean Copy HTML to the clipboard after generation. Default is false . browser_print boolean When opening in the web browser, also open the browser's print dialog. This will be ignored if view_open is true . Default is false . view_open boolean Open HTML in a Sublime Text tab instead of the web browser. Default is false . no_header boolean Do not display file name, date, and time at the top of the HTML document. Default is false . date_time_format string String denoting the format for date and time when displaying header. Please see Python's documentation on time.strftime for detailed info on formatting syntax. Default is \"%m/%d/%y %I:%M:%S\" . show_full_path boolean Show full path for file name when displaying header. Default is true . save_location string Path to save HTML file. If the file is wanted in the same file as the original, use \".\". Otherwise, use the absolute path to where the file is desired. If there is an issue determining where to save the file, or the path does not exist, the OS temp folder will be used. Default is None (use temp folder). time_stamp string Configure the time stamp of saved HTML when using save_location . To remove time stamps, just set to an empty string \"\" . Please see Python's documentation on time.strftime for detailed info on formatting syntax. Default is \"_%m%d%y%H%M%S\" . toolbar array of strings Option to display a toolbar with to access features in a generated HTML. This setting is an array of keywords that represent the icons in the toolbar to show. Valid keywords include gutter , print , plain_text , annotation , and wrapping . Toolbar will appear when you mouse over the upper right corner of the window of the generated HTML. Default enables all. filter string Filters to use on the theme's colors. The string is a sequence of filters separated by ; . The accepted filters are grayscale , invert , sepia , brightness , contrast , glow , saturation , hue , and colorize . brightness , saturation , and contrast require a float parameter to specify to what magnitude the filter should be applied at. glow requires a float for intensity (usually something like .1 or .2 is sufficient). hue and colorize take a float that represents a degree. hue shifts the hue via the degree given (can accept negative degrees); hues will wrap if they extend past 0 degrees or 360 degrees. Example: \"filter\": \"sepia;invert;brightness(1.1);saturation(1.3);\" . Default is \"\" . disable_nbsp boolean Disable the translation of spaces into &nbsp; . This was originally introduced so I could copy and paste content into Microsoft Outlook. If this is not desired, you can disable it here. table_mode boolean Render export of code in tables which makes copy and paste in things like Outlook or Gmail possible. Default is true . If you wish to bind a command to a key combination etc., the same settings as above can be used. Example: { \"keys\" : [ \"ctrl+alt+n\" ], \"command\" : \"export_html\" , \"args\" : { \"numbers\" : true , \"wrap\" : 900 , \"browser_print\" : true , \"multi_select\" : true , \"color_scheme\" : \"Packages/ExportHtml/ColorSchemes/Print Color.sublime-color-scheme\" , \"style_gutter\" : false } } When viewing the HTML in your web browser, regardless of the gutter settings, the gutter can be toggled to show or be hidden using the toolbar in the upper right corner of the page.","title":"Exporting HTML"},{"location":"usage/#annotations-html-only","text":"Annotations are comments you can make on selected text. When the HTML is generated, the selected text will be underlined, and when the mouse hovers over them, a tooltip will appear with your comment. In order to use annotations, you must enter into an \"Annotation Mode\". This puts your file in a read only state. At this point, you can select text and create annotations using the annotation commands provided. When you leave the \"Annotation Mode\", all annotations will be lost. So you must export before leaving annotation mode. You can access the annotation commands from the command palette or from the context menu. The commands are as follows: Command Description Enable Annotation Mode Turn annotation mode on. Disable Annotation Mode Turn annotation mode off. Annotate Selection Annotate the given selection (no multi-select support currently). Delete Annotation(s) Delete the annotation region the the cursor resides in (multi-select support). Delete All Annotations Delete all annotation regions. Show Annotation Comment Show the annotation comment of the region under the cursor. You can navigate the annotations in the generated HTML by using a jump table. You can show the jump table at any time by selecting the annotation button in the toolbar. You can also click any annotation to show the jump table as well. If it gets in the way, you can dock it in a different location.","title":"Annotations (HTML only)"},{"location":"usage/#settings-file-options","text":"Parameter Type Description alternate_scheme string or false Defines a default theme to be used if a theme is not specified in a command. When this is false, the current Sublime Text theme in use is used. alternate_font_size integer or false Define an alternate font_size to use by default instead of the current one in use. Use the current one in use if set to a literal false . Default is false . alternate_font_face string or false Define an alternate font_face to use by default instead of the current one in use. Use the current one in use if set to a literal false . Default is false . valid_selection_size integer Minimum allowable size for a selection to be accepted for only the selection to be printed. html_panel array of commands Define export configurations to appear under the Export to HTML: Show Export Menu command palette command.","title":"Settings File options"},{"location":"_snippets/abbr/","text":"","title":"Abbr"},{"location":"_snippets/links/","text":"","title":"Links"},{"location":"_snippets/refs/","text":"","title":"Refs"},{"location":"about/contributing/","text":"Contributing & Support Overview Sublime Versions Description ST2 Supported on a separate branch, but not actively. Any further fixes or enhancements must come from the community. Issues for versions less than ST3 will not be addressed moving forward by me. Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull must already exist on the main, actively developed branch. I will not allow an older branch to exceed the main branch in regards to functionality. ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Become a sponsor. Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Become a Sponsor Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal Bug Reports Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->ExportHtml->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. Provide links to 3 rd party color scheme package you are using if applicable. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Pull Requests Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Running Validation Tests Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 . JavaScript files are linted with the jshint module for nodejs . nodejs can be downloaded and installed from https://nodejs.org . jshint can be installed with node's package manager called npm . This example will illustrate how to install and use jshint globally. If you don't want to do it globally and know how to do it locally, feel free to that as well. Install. npm install -g jshint Linting is performed with the following command: jshint . Documentation Improvements A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"about/contributing/#overview","text":"Sublime Versions Description ST2 Supported on a separate branch, but not actively. Any further fixes or enhancements must come from the community. Issues for versions less than ST3 will not be addressed moving forward by me. Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull must already exist on the main, actively developed branch. I will not allow an older branch to exceed the main branch in regards to functionality. ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Become a sponsor. Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"about/contributing/#become-a-sponsor","text":"Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal","title":"Become a Sponsor "},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->ExportHtml->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. Provide links to 3 rd party color scheme package you are using if applicable. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"about/contributing/#running-validation-tests","text":"Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 . JavaScript files are linted with the jshint module for nodejs . nodejs can be downloaded and installed from https://nodejs.org . jshint can be installed with node's package manager called npm . This example will illustrate how to install and use jshint globally. If you don't want to do it globally and know how to do it locally, feel free to that as well. Install. npm install -g jshint Linting is performed with the following command: jshint .","title":"Running Validation Tests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Documentation Improvements"},{"location":"about/license/","text":"License ExportHtml is released under the MIT license. Copyright \u00a9 2012 - 2021 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"ExportHtml is released under the MIT license. Copyright \u00a9 2012 - 2021 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}