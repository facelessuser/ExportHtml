{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ExportHtml","text":""},{"location":"#overview","title":"Overview","text":"<p>This is a fork of Andrew Gibson's PrintHtml plugin.  This plugin allows the exporting of a document in Sublime Text to a HTML file.  It duplicates Sublime's theme colors and font styles.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Export to HTML using any <code>tmTheme</code> or <code>sublime-color-scheme</code> for syntax highlighting.</li> <li>Can handle any language supported by ST3+.</li> <li>Supports bold and italic theme font styles as well.</li> <li>Configurable output.</li> <li>Format suitable for copying and pasting in emails.</li> <li>2 included <code>sublime-color-scheme</code> files for color and grayscale printing (but any can be used).</li> <li>Export only selections (multi-select supported).</li> <li>Export and show highlights (multi-select supported).</li> <li>Toggle gutter on/off in browser view.</li> <li>Automatically open browser print dialog (optional).</li> <li>Enable/disable configurable word wrapping.</li> <li>Configurable toolbar to appear in the generated webpage.</li> </ul>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Andrew Gibson: Original idea and base code for converting Sublime view to HTML and allowing me to build     off it to make ExportHtml.</li> <li>Print-Color and Print-Grayscale <code>sublime-color-scheme</code> files were derived from Monokai Bright.</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#package-control","title":"Package Control","text":"<p>The recommended way to install ExportHtml is via Package Control.  Package Control will install the correct branch on your system and keep it up to date.</p> <ol> <li> <p>Ensure Package Control is installed.  Instructions are found here.</p> </li> <li> <p>In Sublime Text, press Ctrl\uff0bShift\uff0bP (Win, Linux) or Cmd\uff0bShift\uff0bP (macOS) to bring up the quick panel.  It will show a list of installable plugins.</p> </li> <li> <p>Start typing <code>ExportHtml</code>; when you see it, select it.</p> </li> <li> <p>Restart to be sure everything is loaded proper.</p> </li> <li> <p>Enjoy!</p> </li> </ol>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>Warning</p> <p>This is not the recommended way to install ExportHtml for the average user.  Installing this way will not get automatically updated.</p> <p>If you are forking for a pull request, you should just clone ExportHtml and run Package Control's <code>Satisfy Dependency</code> command to get all the dependencies.</p> <p>For those who want to install ExportHtml without package control, here are the steps.  It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.</p> <ol> <li> <p>Download the latest releases of the following dependencies and unpack or git clone in the <code>Packages</code> folder as shown     below:</p> <ul> <li>teddy_beer_maniac/sublime-text-dependency-markupsafe -&gt; <code>markupsafe</code></li> <li>teddy_beer_maniac/sublime-text-dependency-jinja2 -&gt; <code>python-jinja2</code></li> <li>packagecontrol/pygments -&gt; <code>pygments</code></li> <li>facelessuser/sublime-markdown-popups -&gt; <code>mdpopups</code></li> <li>facelessuser/sublime-markdown -&gt; <code>python-markdown</code></li> </ul> </li> <li> <p>Download and unpack or git clone the latest ExportHtml release and unpack as <code>ExportHtml</code>:</p> <ul> <li>facelessuser/ExportHtml -&gt; ExportHtml</li> </ul> </li> <li> <p>Create a folder under <code>Packages</code> called <code>00-dependencies</code> and under that folder create a file called    <code>00-dependencies.py</code>:</p> <p>Copy the following code to <code>00-dependencies.py</code> (this code was taken from Package Control):</p> <pre><code>import sys\nimport os\nfrom os.path import dirname\n\nif os.name == 'nt':\n    from ctypes import windll, create_unicode_buffer\n\nimport sublime\n\n\nif sys.version_info &gt;= (3,):\n    def decode(path):\n        return path\n\n    def encode(path):\n        return path\n\n    if os.path.basename(__file__) == 'sys_path.py':\n        pc_package_path = dirname(dirname(__file__))\n    # When loaded as a .sublime-package file, the filename ends up being\n    # Package Control.sublime-package/Package Control.package_control.sys_path\n    else:\n        pc_package_path = dirname(__file__)\n    st_version = u'3'\n\nelse:\n    def decode(path):\n        if not isinstance(path, unicode):\n            path = path.decode(sys.getfilesystemencoding())\n        return path\n\n    def encode(path):\n        if isinstance(path, unicode):\n            path = path.encode(sys.getfilesystemencoding())\n        return path\n\n    pc_package_path = decode(os.getcwd())\n    st_version = u'2'\n\n\nst_dir = dirname(dirname(pc_package_path))\n\n\ndef add(path, first=False):\n\"\"\"\n    Adds an entry to the beginning of sys.path, working around the fact that\n    Python 2.6 can't import from non-ASCII paths on Windows.\n\n    :param path:\n        A unicode string of a folder, zip file or sublime-package file to\n        add to the path\n\n    :param first:\n        If the path should be added at the beginning\n    \"\"\"\n\n    if os.name == 'nt':\n        # Work around unicode path import issue on Windows with Python 2.6\n        buf = create_unicode_buffer(512)\n        if windll.kernel32.GetShortPathNameW(path, buf, len(buf)):\n            path = buf.value\n\n    enc_path = encode(path)\n\n    if os.path.exists(enc_path):\n        if first:\n            try:\n                sys.path.remove(enc_path)\n            except (ValueError):\n                pass\n            sys.path.insert(0, enc_path)\n        elif enc_path not in sys.path:\n            sys.path.append(enc_path)\n\n\ndef remove(path):\n\"\"\"\n    Removes a path from sys.path if it is present\n\n    :param path:\n        A unicode string of a folder, zip file or sublime-package file\n    \"\"\"\n\n    try:\n        sys.path.remove(encode(path))\n    except (ValueError):\n        pass\n\n    if os.name == 'nt':\n        buf = create_unicode_buffer(512)\n        if windll.kernel32.GetShortPathNameW(path, buf, len(buf)):\n            path = buf.value\n        try:\n            sys.path.remove(encode(path))\n        except (ValueError):\n            pass\n\n\ndef generate_dependency_paths(name):\n\"\"\"\n    Accepts a dependency name and generates a dict containing the three standard\n    import paths that are valid for the current machine.\n\n    :param name:\n        A unicode string name of the dependency\n\n    :return:\n        A dict with the following keys:\n         - 'ver'\n         - 'plat'\n         - 'arch'\n    \"\"\"\n\n    packages_dir = os.path.join(st_dir, u'Packages')\n    dependency_dir = os.path.join(packages_dir, name)\n\n    ver = u'st%s' % st_version\n    plat = sublime.platform()\n    arch = sublime.arch()\n\n    return {\n        'all': os.path.join(dependency_dir, 'all'),\n        'ver': os.path.join(dependency_dir, ver),\n        'plat': os.path.join(dependency_dir, u'%s_%s' % (ver, plat)),\n        'arch': os.path.join(dependency_dir, u'%s_%s_%s' % (ver, plat, arch))\n    }\n\n\ndef add_dependency(name, first=False):\n\"\"\"\n    Accepts a dependency name and automatically adds the appropriate path\n    to sys.path, if the dependency has a path for the current platform and\n    architecture.\n\n    :param name:\n        A unicode string name of the dependency\n\n    :param first:\n        If the path should be added to the beginning of the list\n    \"\"\"\n\n    dep_paths = generate_dependency_paths(name)\n\n    for path in dep_paths.values():\n        if os.path.exists(encode(path)):\n            add(path, first=first)\n\n\nadd_dependency('pygments')\nadd_dependency('markupsafe')\nadd_dependency('python-markdown')\nadd_dependency('python-jinja2')\nadd_dependency('mdpopups')\n</code></pre> </li> <li> <p>Restart and enjoy.</p> </li> </ol>"},{"location":"installation/#git-cloning","title":"Git Cloning","text":"<ol> <li> <p>Quit Sublime Text.</p> </li> <li> <p>Open a terminal and enter the following.  For dependencies replace the URL with the appropriate URL, and the     appropriate folder to check it out to:</p> <pre><code>cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ExportHtml.git ExportHtml\n</code></pre> </li> <li> <p>Restart Sublime Text.</p> </li> </ol>"},{"location":"usage/","title":"User Guide","text":""},{"location":"usage/#exporting-html","title":"Exporting HTML","text":"<p>ExportHtml comes with a number of default commands available, but these can be overridden in the settings file.  You can also create commands directly outside of the settings file bound to the command palette, key bindings, or even the menu.</p> <p>If adding a command to the settings file, it goes under the <code>html_panel</code> setting.  These configurations will appear under the <code>Export to HTML: Show Export Menu</code> command palette command.</p> <pre><code>// Define configurations for the drop down export menu\n\"html_panel\": [\n// Browser print color (selections and multi-selections allowed)\n{\n\"Browser Print - Color\": {\n\"numbers\": true,\n\"wrap\": 900,\n\"browser_print\": true,\n\"multi_select\": true,\n\"color_scheme\": \"Packages/ExportHtml/ColorSchemes/Print Color.sublime-color-scheme\",\n\"style_gutter\": false\n}\n}\n]\n</code></pre> <p>The name of the command is the key value, and then you add the parameters you wish to specify.  You can use any combination of settings below.</p> Parameter Type Description <code>numbers</code> boolean Display line numbers in the gutter. <code>style_gutter</code> boolean Style gutter with theme backgrounds and foregrounds, or just use the default background/foreground.  Default is <code>true</code>. <code>multi_select</code> boolean If multiple regions are selected in a document, only export what is under those selections. By default only the first selection is recognized.  Default is <code>false</code>. <code>highlight_selections</code> boolean Highlights all selections in HTML output using the themes selection colors.  Multi-select option will be ignored if this is set <code>true</code>.  Default is <code>false</code>. <code>ignore_selections</code> boolean Ignores selections in the view.  If this is set, <code>multi_select</code> and <code>highlight_selections</code> will be treated as <code>false</code> regardless of their actual value. <code>wrap</code> integer Define the allowable size in <code>px</code> to wrap lines at.  By default wrapping is not used. <code>color_scheme</code> string The color scheme (tmTheme or sublime-color-scheme) file you would like to use.  By default the current color scheme file is used, or the alternate default color scheme if defined in the setting <code>alternate_scheme</code>. <code>clipboard_copy</code> boolean Copy HTML to the clipboard after generation. Default is <code>false</code>. <code>browser_print</code> boolean When opening in the web browser, also open the browser's print dialog. This will be ignored if <code>view_open</code> is <code>true</code>.  Default is <code>false</code>. <code>view_open</code> boolean Open HTML in a Sublime Text tab instead of the web browser.  Default is <code>false</code>. <code>no_header</code> boolean Do not display file name, date, and time at the top of the HTML document. Default is <code>false</code>. <code>date_time_format</code> string String denoting the format for date and time when displaying header.  Please see Python's documentation on <code>time.strftime</code> for detailed info on formatting syntax.  Default is <code>\"%m/%d/%y %I:%M:%S\"</code>. <code>show_full_path</code> boolean Show full path for file name when displaying header. Default is <code>true</code>. <code>save_location</code> string Path to save HTML file.  If the file is wanted in the same file as the original, use \".\".  Otherwise, use the absolute path to where the file is desired.  If there is an issue determining where to save the file, or the path does not exist, the OS temp folder will be used. Default is <code>None</code> (use temp folder). <code>time_stamp</code> string Configure the time stamp of saved HTML when using <code>save_location</code>.  To remove time stamps, just set to an empty string <code>\"\"</code>.  Please see Python's documentation on <code>time.strftime</code> for detailed info on formatting syntax.  Default is <code>\"_%m%d%y%H%M%S\"</code>. <code>toolbar</code> array\u00a0of\u00a0strings Option to display a toolbar with to access features in a generated HTML.  This setting is an array of keywords that represent the icons in the toolbar to show.  Valid keywords include <code>gutter</code>, <code>print</code>, <code>plain_text</code>, <code>annotation</code>, and <code>wrapping</code>.  Toolbar will appear when you mouse over the upper right corner of the window of the generated HTML.  Default enables all. <code>filter</code> string Filters to use on the theme's colors.  The string is a sequence of filters separated by <code>;</code>.  The accepted filters are <code>grayscale</code>, <code>invert</code>, <code>sepia</code>, <code>brightness</code>, <code>contrast</code>, <code>glow</code>, <code>saturation</code>, <code>hue</code>, and <code>colorize</code>.  <code>brightness</code>, <code>saturation</code>, and <code>contrast</code> require a float parameter to specify to what magnitude the filter should be applied at.  <code>glow</code> requires a float for intensity (usually something like .1 or .2 is sufficient).  <code>hue</code> and <code>colorize</code> take a float that represents a degree.  <code>hue</code> shifts the hue via the degree given (can accept negative degrees); hues will wrap if they extend past 0 degrees or 360 degrees.  Example: <code>\"filter\": \"sepia;invert;brightness(1.1);saturation(1.3);\"</code>.  Default is <code>\"\"</code>. <code>disable_nbsp</code> boolean Disable the translation of spaces into <code>&amp;nbsp;</code>.  This was originally introduced so I could copy and paste content into Microsoft Outlook.  If this is not desired, you can disable it here. <code>table_mode</code> boolean Render export of code in tables which makes copy and paste in things like Outlook or Gmail possible. Default is <code>true</code>. <p>If you wish to bind a command to a key combination etc., the same settings as above can be used.</p> <p>Example:</p> <pre><code>{\n\"keys\": [\"ctrl+alt+n\"],\n\"command\": \"export_html\",\n\"args\": {\n\"numbers\": true,\n\"wrap\": 900,\n\"browser_print\": true,\n\"multi_select\": true,\n\"color_scheme\": \"Packages/ExportHtml/ColorSchemes/Print Color.sublime-color-scheme\",\n\"style_gutter\": false\n}\n}\n</code></pre> <p>When viewing the HTML in your web browser, regardless of the gutter settings, the gutter can be toggled to show or be hidden using the toolbar in the upper right corner of the page.</p>"},{"location":"usage/#annotations-html-only","title":"Annotations (HTML only)","text":"<p>Annotations are comments you can make on selected text.  When the HTML is generated, the selected text will be underlined, and when the mouse hovers over them, a tooltip will appear with your comment.</p> <p></p> <p>In order to use annotations, you must enter into an \"Annotation Mode\".  This puts your file in a read only state.  At this point, you can select text and create annotations using the annotation commands provided.  When you leave the \"Annotation Mode\", all annotations will be lost.  So you must export before leaving annotation mode.</p> <p>You can access the annotation commands from the command palette or from the context menu.</p> <p>The commands are as follows:</p> Command Description Enable Annotation Mode Turn annotation mode on. Disable Annotation Mode Turn annotation mode off. Annotate Selection Annotate the given selection (no multi-select support currently). Delete Annotation(s) Delete the annotation region the the cursor resides in (multi-select support). Delete All Annotations Delete all annotation regions. Show Annotation Comment Show the annotation comment of the region under the cursor. <p>You can navigate the annotations in the generated HTML by using a jump table.  You can show the jump table at any time by selecting the annotation button in the toolbar.  You can also click any annotation to show the jump table as well. If it gets in the way, you can dock it in a different location.</p> <p></p>"},{"location":"usage/#settings-file-options","title":"Settings File options","text":"Parameter Type Description <code>alternate_scheme</code> string\u00a0or\u00a0false Defines a default theme to be used if a theme is not specified in a command.  When this is false, the current Sublime Text theme in use is used. <code>alternate_font_size</code> integer\u00a0or\u00a0false Define an alternate font_size to use by default instead of the current one in use.  Use the current one in use if set to a literal <code>false</code>.  Default is <code>false</code>. <code>alternate_font_face</code> string\u00a0or\u00a0false Define an alternate font_face to use by default instead of the current one in use.  Use the current one in use if set to a literal <code>false</code>.  Default is <code>false</code>. <code>valid_selection_size</code> integer Minimum allowable size for a selection to be accepted for only the selection to be printed. <code>html_panel</code> array\u00a0of\u00a0commands Define export configurations to appear under the <code>Export to HTML: Show Export Menu</code> command palette command."},{"location":"about/contributing/","title":"Contributing &amp; Support","text":""},{"location":"about/contributing/#overview","title":"Overview","text":"Sublime\u00a0Versions Description ST2 Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than ST3 will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull must already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality. ST3 Fully supported and actively maintained. <p>Contribution from the community is encouraged and can be done in a variety of ways:</p> <ul> <li>Become a sponsor.</li> <li>Bug reports.</li> <li>Reviewing code.</li> <li>Code patches via pull requests.</li> <li>Documentation improvements via pull requests.</li> </ul>"},{"location":"about/contributing/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal.</p> <p> GitHub Sponsors  PayPal</p>"},{"location":"about/contributing/#bug-reports","title":"Bug Reports","text":"<ol> <li> <p>Please read the documentation and search the issue tracker to try to find the answer to your question     before posting an issue.</p> </li> <li> <p>When an issue is created, a template will be shown, please fill out the appropriate sections. If the     template is not followed, the issue will be marked <code>Invalid</code> and closed.</p> </li> <li> <p>When creating an issue on the repository, please provide as much info as possible:</p> <ul> <li>Provide environment information by running <code>Preferences-&gt;Package Settings-&gt;ExportHtml-&gt;Support Info</code>.  The     information will be copied to the clipboard; paste the info in issue.</li> <li>Errors in console.</li> <li>Detailed description of the problem.</li> <li>Examples for reproducing the error.  You can post pictures, but if specific text or code is required to     reproduce the issue, please provide the text in a plain text format for easy copy/paste.</li> <li>Provide links to 3rd party color scheme package you are using if applicable.</li> </ul> <p>The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.</p> </li> <li> <p>Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses     to respond to follow up questions will be marked as stale and closed.</p> </li> </ol>"},{"location":"about/contributing/#reviewing-code","title":"Reviewing Code","text":"<p>Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.</p>"},{"location":"about/contributing/#pull-requests","title":"Pull Requests","text":"<p>Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.</p> <p>Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.</p>"},{"location":"about/contributing/#running-validation-tests","title":"Running Validation Tests","text":"<p>Tip</p> <p>If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):</p> <pre><code>chmod +x run_tests.sh\n./run_tests.sh\n</code></pre> <p>There are a couple of dependencies that must be present before running the tests.</p> <ol> <li> <p>As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests.</p> </li> <li> <p>Unit tests are run with pytest (pytest-dev/pytest).  You can install <code>pytest</code> via:</p> <pre><code>pip install pytest\n</code></pre> <p>The tests should be run from the root folder of the plugin by using the following command:</p> <pre><code>py.test .\n</code></pre> </li> <li> <p>Linting is performed on the entire project with the following modules:</p> <ul> <li>pycqa/flake8</li> <li>pycqa/flake8-docstrings</li> <li>ebeweber/flake8-mutable</li> <li>gforcada/flake8-builtins</li> <li>pycqa/pep8-naming</li> </ul> <p>These can be installed via:</p> <pre><code>pip install flake8\npip install flake8-docstrings\npip install flake8-mutable\npip install flake8-builtins\npip install pep8-naming\n</code></pre> <p>Linting is performed with the following command:</p> <pre><code>flake8 .\n</code></pre> </li> <li> <p>JavaScript files are linted with the <code>jshint</code> module for <code>nodejs</code>.</p> <ul> <li><code>nodejs</code> can be downloaded and installed from https://nodejs.org.</li> <li> <p><code>jshint</code> can be installed with node's package manager called <code>npm</code>. This example will illustrate how to install     and use <code>jshint</code> globally.  If you don't want to do it globally and know how to do it locally, feel free to that     as well.</p> <p>Install.</p> <pre><code>npm install -g jshint\n</code></pre> <p>Linting is performed with the following command:</p> <pre><code>jshint .\n</code></pre> </li> </ul> </li> </ol>"},{"location":"about/contributing/#documentation-improvements","title":"Documentation Improvements","text":"<p>A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.</p> <p>You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs, the squidfunk/mkdocs-material, and facelessuser/pymdown-extensions to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is <code>mkdocs serve</code> from the root directory. You can then view the documents at <code>localhost:8000</code>.</p>"},{"location":"about/license/","title":"License","text":"<p>ExportHtml is released under the MIT license.</p> <p>Copyright \u00a9 2012 - 2023 Isaac Muse isaacmuse@gmail.com</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}